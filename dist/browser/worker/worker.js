import{assertUnreachable as o}from"../../utils/assertUnreachable.js";class s{constructor(t,e){this.workerScope=t;this.options=e;this.options.endpoint=this.options.endpoint||"https://api-core.pushpushgo.com/v1",this.options.onSubscriptionChange={endpoint:this.options.onSubscriptionChange.endpoint||o("options.onSubscriptionChangeConfig.endpoint is required"),headers:this.options.onSubscriptionChange.headers||{}},this.registerInstallEventHandler(),this.registerActivateEventHandler(),this.registerPushEventHandler(),this.registerNotificationClickEventHandler(),this.registerNotificationCloseEventHandler(),this.registerSyncEventHandler(),this.registerPushSubscriptionChangeEventHandler()}async clearBadge(){if("clearAppBadge"in self.navigator)try{await self.navigator.clearAppBadge()}catch(t){console.error("Failed to clear app badge:",t)}}async setBadge(t){if("setAppBadge"in self.navigator)try{await self.navigator.setAppBadge(t)}catch(e){console.error("Failed to set app badge:",e)}}async processBadge(t){return t===0?this.clearBadge():this.setBadge(t)}async sendNotificationEvent(t){console.log("try to send notification with event: ",t),await fetch(`${this.options.endpoint}/context/${t.payload.contextId}/events/${t.type}`,{method:"post",headers:{"content-type":"application/json"},body:JSON.stringify(t.payload)})}registerPushSubscriptionChangeEventHandler(){this.workerScope.addEventListener("pushsubscriptionchange",async t=>{const e=t,n=e.oldSubscription.toJSON(),i=e.newSubscription.toJSON();await fetch(this.options.onSubscriptionChange.endpoint,{method:"post",headers:{...this.options.onSubscriptionChange.headers,"content-type":"application/json"},body:JSON.stringify({type:"change",payload:{oldSubscription:n,newSubscription:i}})})})}registerSyncEventHandler(){}registerActivateEventHandler(){this.workerScope.addEventListener("activate",t=>{t.waitUntil(this.workerScope.clients.claim())})}registerInstallEventHandler(){this.workerScope.addEventListener("install",()=>this.workerScope.skipWaiting())}registerPushEventHandler(){this.workerScope.addEventListener("push",t=>{if(!t.data){console.warn("event.data is null, omit");return}const e=t.data.json();if(e.data._silent)return console.warn("event.data._silent is not null, omit"),t.waitUntil(Promise.all([this.sendNotificationEvent({type:"delivered",payload:{contextId:e.data.contextId,messageId:e.data.messageId,foreignId:e.data.foreignId}})]));if(typeof e.data.badge=="number"&&(console.warn("event.data.badge is not null, go to process badge if supported"),this.processBadge(e.data.badge)),typeof e.data.externalData=="string")try{typeof this.options.onExternalData=="function"&&this.options.onExternalData(e.data.externalData)}catch(n){console.error(n)}t.waitUntil(Promise.all([this.workerScope.registration.showNotification(e.title,e),this.sendNotificationEvent({type:"delivered",payload:{contextId:e.data.contextId,messageId:e.data.messageId,foreignId:e.data.foreignId}})]))})}registerNotificationClickEventHandler(){this.workerScope.addEventListener("notificationclick",t=>{t.notification.close();const e=t.notification.data.actionsMap[t.action||"default"];t.waitUntil(Promise.all([this.sendNotificationEvent({type:"clicked",payload:{contextId:t.notification.data.contextId,messageId:t.notification.data.messageId,foreignId:t.notification.data.foreignId,action:t.action}}),this.workerScope.clients.matchAll({type:"window",includeUncontrolled:!0}).then(n=>{if(!e){console.warn("url is not provided for this action, omit");const i=n.at(0);return i?(console.warn("do not match any active client to focus, omit"),i.focus()):void 0}for(const i of n)if(i.url===e&&"focus"in i)return i.focus();return this.workerScope.clients.openWindow(e)})]))})}registerNotificationCloseEventHandler(){this.workerScope.addEventListener("notificationclose",t=>{t.waitUntil(this.sendNotificationEvent({type:"closed",payload:{contextId:t.notification.data.contextId,messageId:t.notification.data.messageId,foreignId:t.notification.data.foreignId}}))})}}export{s as Worker};
