import{assertUnreachable as o}from"../../utils/assertUnreachable.js";class s{constructor(t,i){this.workerScope=t;this.options=i;this.options.endpoint=this.options.endpoint||"https://api-core.pushpushgo.com/v1",this.options.onSubscriptionChange={endpoint:this.options.onSubscriptionChange.endpoint||o("options.onSubscriptionChangeConfig.endpoint is required"),headers:this.options.onSubscriptionChange.headers||{}},this.registerInstallEventHandler(),this.registerActivateEventHandler(),this.registerPushEventHandler(),this.registerNotificationClickEventHandler(),this.registerNotificationCloseEventHandler(),this.registerSyncEventHandler(),this.registerPushSubscriptionChangeEventHandler()}async sendNotificationEvent(t){console.log("try to send notification with event: ",t),await fetch(`${this.options.endpoint}/context/${t.payload.contextId}/events/${t.type}`,{method:"post",headers:{"content-type":"application/json"},body:JSON.stringify(t.payload)})}registerPushSubscriptionChangeEventHandler(){this.workerScope.addEventListener("pushsubscriptionchange",async t=>{const i=t,n=i.oldSubscription.toJSON(),e=i.newSubscription.toJSON();await fetch(this.options.onSubscriptionChange.endpoint,{method:"post",headers:{...this.options.onSubscriptionChange.headers,"content-type":"application/json"},body:JSON.stringify({type:"change",payload:{oldSubscription:n,newSubscription:e}})})})}registerSyncEventHandler(){}registerActivateEventHandler(){this.workerScope.addEventListener("activate",t=>{t.waitUntil(this.workerScope.clients.claim())})}registerInstallEventHandler(){this.workerScope.addEventListener("install",()=>this.workerScope.skipWaiting())}registerPushEventHandler(){this.workerScope.addEventListener("push",t=>{if(!t.data){console.warn("event.data is null, omit");return}const i=t.data.json();if(i.data._silent)return console.warn("event.data._silent is not null, omit"),t.waitUntil(Promise.all([this.sendNotificationEvent({type:"delivered",payload:{contextId:i.data.contextId,messageId:i.data.messageId,foreignId:i.data.foreignId}})]));t.waitUntil(Promise.all([this.workerScope.registration.showNotification(i.title,i),this.sendNotificationEvent({type:"delivered",payload:{contextId:i.data.contextId,messageId:i.data.messageId,foreignId:i.data.foreignId}})]))})}registerNotificationClickEventHandler(){this.workerScope.addEventListener("notificationclick",t=>{t.notification.close();const i=t.notification.data.actionsMap[t.action||"default"];t.waitUntil(Promise.all([this.sendNotificationEvent({type:"clicked",payload:{contextId:t.notification.data.contextId,messageId:t.notification.data.messageId,foreignId:t.notification.data.foreignId,action:t.action}}),this.workerScope.clients.matchAll({type:"window",includeUncontrolled:!0}).then(n=>{if(!i){console.warn("url is not provided for this action, omit");const e=n.at(0);return e?(console.warn("do not match any active client to focus, omit"),e.focus()):void 0}for(const e of n)if(e.url===i&&"focus"in e)return e.focus();return this.workerScope.clients.openWindow(i)})]))})}registerNotificationCloseEventHandler(){this.workerScope.addEventListener("notificationclose",t=>{t.waitUntil(this.sendNotificationEvent({type:"closed",payload:{contextId:t.notification.data.contextId,messageId:t.notification.data.messageId,foreignId:t.notification.data.foreignId}}))})}}export{s as Worker};
