import{Context as n}from"./context.js";class a{constructor(t,e,r){this._bucketId=t;this._internalClient=e;this._providers=r}static createCredentialKey(t,e){if(!e)throw new Error("Identificator for credential for type should exists");return[t,e].join(".")}getId(){return this._bucketId}createReceiver(t){const e=t.websitePushId||t.appBundleId||t.publicKey||t.project,r=this._providers.get(a.createCredentialKey(t.type,e));if(!r)throw new Error(`Cannot create receiver - provider credentials are not configured for ${t.type}`);return{...t,credentialId:r}}async sendMessage(t,e){return await this._internalClient.post(`/bucket/${this._bucketId}/send`).body({receiver:t,metadata:e}).execute()}async createRawContext(t){const e=await this._internalClient.post(`/bucket/${this._bucketId}/context/raw`).body(t).execute();return new n(e.contextId,this._internalClient,this)}async createSilentContext(t){const e=await this._internalClient.post(`/bucket/${this._bucketId}/context/silent`).body(t).execute();return new n(e.contextId,this._internalClient,this)}async createContext(t){const e=await this._internalClient.post(`/bucket/${this._bucketId}/context/data`).body(t).execute();return new n(e.contextId,this._internalClient,this)}}export{a as Bucket};
