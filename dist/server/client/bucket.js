import{Context as n}from"./context.js";class r{constructor(e,t,a){this._bucketId=e;this._internalClient=t;this._providers=a}static createCredentialKey(e,t){if(!t)throw new Error("Identificator for credential for type should exists");return[e,t].join(".")}getId(){return this._bucketId}createReceiver(e){const t=e.websitePushId||e.appBundleId||e.publicKey||e.project,a=this._providers.get(r.createCredentialKey(e.type,t));if(!a)throw new Error(`Cannot create receiver - provider credentials are not configured for ${e.type}`);return{...e,credentialId:a}}async sendRawMessage(e,t){return await this._internalClient.post(`/bucket/${this._bucketId}/send/raw`).body({receiver:e,metadata:t}).execute()}async sendMessage(e,t){return await this._internalClient.post(`/bucket/${this._bucketId}/send`).body({receiver:e,metadata:t}).execute()}async sendSilentMessage(e,t){return await this._internalClient.post(`/bucket/${this._bucketId}/send/silent`).body({receiver:e,metadata:t}).execute()}async createRawContext(e){const t=await this._internalClient.post(`/bucket/${this._bucketId}/context/raw`).body(e).execute();return new n(t.contextId,this._internalClient,this)}async createSilentContext(e){const t=await this._internalClient.post(`/bucket/${this._bucketId}/context/silent`).body(e).execute();return new n(t.contextId,this._internalClient,this)}async createContext(e){const t=await this._internalClient.post(`/bucket/${this._bucketId}/context/data`).body(e).execute();return new n(t.contextId,this._internalClient,this)}}export{r as Bucket};
