import{Bucket as o}from"./bucket.js";import{InternalClient as c}from"./internal-client.js";class s{static PROVIDERS_MAP={apns_cert:["apns/safari","apns/ios"],apns_token:["apns/safari","apns/ios"],fcm_legacy:["fcm/android"],fcm_v1:["fcm/android"],hms:["hms/android"],vapid:["vapid"]};_internalClient;constructor(e){this._internalClient=new c(e.endpoint,e.apiKey)}async createBucket(e,t){const r=await this._internalClient.post("/bucket").body({providerCredentials:e,callbackConfig:t?{type:"http",payload:t}:{type:"none"}}).execute(),n=new Map;for(let i in r.credentials){const d=r.credentials[i],a=e[i];if(!a)throw new Error("Cannot match source credential of provider with results");for(let l of s.PROVIDERS_MAP[a.type])for(let p of this.resolveIdentityDataFromCredentialType(a))n.set(o.createCredentialKey(l,p),d.id)}return new o(r.bucketId,this._internalClient,n)}resolveIdentityDataFromCredentialType(e){switch(e.type){case"apns_cert":case"apns_token":return[e.payload.appBundleId,e.payload.websitePushId].filter(t=>t);case"vapid":return[e.payload.publicKey];case"fcm_legacy":return[e.payload.senderId];case"fcm_v1":return[e.payload.project_id];case"hms":return[e.payload.appId]}}}export{s as PpgCoreClient};
